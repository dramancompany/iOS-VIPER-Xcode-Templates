//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import Combine

final class ___VARIABLE_moduleName___Presenter {
    
    // MARK: - Public properties -
    
    let inputs: ___VARIABLE_moduleName___PresenterInputs
    let outputs: ___VARIABLE_moduleName___PresenterOutputs
    let events = PassthroughSubject<___VARIABLE_moduleName___PresenterEvents, Never>()
    
    // MARK: - Private properties -
    
    private unowned let view: ___VARIABLE_moduleName___ViewInterface
    private let interactor: ___VARIABLE_moduleName___InteractorInterface
    private let wireframe: ___VARIABLE_moduleName___WireframeInterface
    private var cancellables: Set<AnyCancellable> = []
    
    // MARK: - Lifecycle -
    
    init(view: ___VARIABLE_moduleName___ViewInterface, interactor: ___VARIABLE_moduleName___InteractorInterface, wireframe: ___VARIABLE_moduleName___WireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        
        // TODO: define input & output
        
        self.inputs = ___VARIABLE_moduleName___PresenterInputs()
        self.outputs = ___VARIABLE_moduleName___PresenterOutputs()
        
        // TODO: bindings
        
        self.events.sink(receiveValue: { action in
            switch action {
            case .viewDidLoad:
                break
            }
        })
        .store(in: &cancellables)
    }
}

// MARK: - Extensions -

extension ___VARIABLE_moduleName___Presenter: ___VARIABLE_moduleName___PresenterInterface {
}
