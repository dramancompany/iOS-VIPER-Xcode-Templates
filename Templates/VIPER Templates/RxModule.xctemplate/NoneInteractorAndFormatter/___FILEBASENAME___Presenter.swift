//
//  ___FILENAME___
//  ___PROJECTNAME___
//
//  Created by ___FULLUSERNAME___ on ___DATE___.
//  Copyright (c) ___YEAR___ ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation
import RxSwift
import RxCocoa

final class ___VARIABLE_moduleName___Presenter {

    // MARK: - Public properties -
    
    let inputs: ___VARIABLE_moduleName___PresenterInputs
    let outputs: ___VARIABLE_moduleName___PresenterOutputs
    let events = PublishSubject<___VARIABLE_moduleName___PresenterEvents>()
    
    // MARK: - Private properties -

    private unowned let view: ___VARIABLE_moduleName___ViewInterface
    private let formatter: ___VARIABLE_moduleName___FormatterInterface
    private let interactor: ___VARIABLE_moduleName___InteractorInterface
    private let wireframe: ___VARIABLE_moduleName___WireframeInterface
    private let disposeBag = DisposeBag()

    // MARK: - Lifecycle -

    init(view: ___VARIABLE_moduleName___ViewInterface, formatter: ___VARIABLE_moduleName___FormatterInterface, interactor: ___VARIABLE_moduleName___InteractorInterface, wireframe: ___VARIABLE_moduleName___WireframeInterface) {
        self.view = view
        self.formatter = formatter
        self.interactor = interactor
        self.wireframe = wireframe
        
        // TODO: define input & output

        self.inputs = ___VARIABLE_moduleName___PresenterInputs()
        self.outputs = ___VARIABLE_moduleName___PresenterOutputs()
        
        // TODO: bindings

        self.events.subscribe(onNext: { [weak self] action in
            switch action {
            case .viewDidLoad:
                break
            }
        }).disposed(by: disposeBag)
    }
}

// MARK: - Extensions -

extension ___VARIABLE_moduleName___Presenter: ___VARIABLE_moduleName___PresenterInterface {
}
